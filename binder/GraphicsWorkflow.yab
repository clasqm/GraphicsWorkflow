#!/bin/env yab
################################
############# Prologue #############
################################

import libclasqm_main

//Yabadabbadoo notification
########DO NOT RENAME THIS FILE!########
//Yabadabbadoo needs it to function.
//Of course, this does not apply if you are editing in the official yab IDE.
 
##Fill in these fields with your own particulars.
##The variables will be used in the About Box and in naming the program.
 
ProgramName$ = "GraphicsWorkflow"
AuthorName$ = "Michel Clasquin-Johnson <clasqm@gmail.com>"
ProgramVersion$ = "V0.1"
ProgramBriefDescription$ = "This app lets you string together a series of separate scripts and applets and apply the sequence to an image."
ProgramLicense$ = "\nPublic Domain Software."
ProgramAcknowledgements$ ="\nWith thanks to Pete Goodeve for giving me the idea for this app."
 
//*************************
//*****Global Variables****
//*************************
 
## Technically, yab does not require you to declare global variables,
##It just is a really, really good idea to do it anyway.
// set DEBUG = 1 to print out all messages on the console
DEBUG = 1
//change this to DEBUG = 0 when you are ready to bind the program for distribution
systemdir$ = "/boot/system/apps/GraphicsWorkflow"
userdir$ = "/boot/home/config/apps/GraphicsWorkflow"
nonpackageddir$ = "/boot/home/config/non-packaged/apps" 
developerdir$ = "/boot/home/projects/GraphicsWorkflow/PackagingFolder/apps/GraphicsWorkflow"
AppletsFile$ = TempDir$() + "/GraphicsWorkflow.content"
PicFile$ = TempDir$() + "/GraphicsWorkflow.pics"
AppletsTempFile$ = TempDir$() + "/GraphicsWorkflow.tmp"
MWWidth = 450
MWHeight = 600

//Test if running in dev environment - if so set default pic there
//else set default pic to package format 
if WhereAmI$() = "/boot/home/projects/GraphicsWorkflow/binder" then
	DefaultPic$ = "/boot/home/projects/GraphicsWorkflow/PackagingFolder/data/artwork/GraphicsWorkflow/GW_Original.jpg"
else
	DefaultPic$ = "../../data/artwork/GraphicsWorkflow/GW_Original.jpg"
endif

##########################
######Preliminary Commands#####
##########################

## Commands to run before the Main Loop come here.
## e.g. setting up a window with a menu.
 
GetApplets() 
 
OpenWindow()

 
 
 
#######End of Prologue#######


//Yabadabbadoo notification
########DO NOT RENAME THIS FILE!########
//Yabadabbadoo needs it to function.
//Of course, this does not apply if you are editing in the official yab IDE.

//Main Message Loop
dim msg$(1)
while(not leavingLoop)
	nCommands = token(message$, msg$(), "|")
	for everyCommand = 1 to nCommands
		if(DEBUG and msg$(everyCommand)<>"") print msg$(everyCommand)
		switch(msg$(everyCommand))
			case "_QuitRequested":
			case "MainWindow:_QuitRequested":
			case "MainWindow:File:Quit":
				leavingLoop = true
				break
			case "MainWindow:Help:About":
				Alert ProgramName$ + " " + ProgramVersion$ + "\n" + "by " + AuthorName$ +"\n\n" + ProgramBriefDescription$ + "\n" + ProgramLicense$ + "\n" + ProgramAcknowledgements$, "OK", "none"
			default:
				break
		end switch
	next everyCommand
wend
CloseWindow()

sub CloseWindow()
	//Close down the main window
	system("rm -f " + AppletsFile$ + " &")
	system("rm -f " + PicFile$ + " &")
	if window get "MainWindow", "exists" window close "MainWindow"
	exit
end sub

sub DrawEmptyPreview()
	//fill preview box with grey so that if you load a picture
	//with different dimensions, the old one does not 
	//bleed through on the edges
	local viewheight, viewwidth
	viewheight = view get "Preview", "height"
	viewwidth = view get "Preview", "width"
	draw set "highcolor", 216,216,216, "Preview"
	draw rect 0,0 to viewwidth, viewheight, "Preview"
	draw set "highcolor", 0,0,0, "Preview"
end sub

sub DrawPreview(TheFile$)
	local viewheight, viewwidth, loaderror, tip$, tokennum, w$(1)
	viewheight = view get "Preview", "height"
	viewwidth = view get "Preview", "width"
	loaderror = Draw image 0,0 to viewwidth, -1, TheFile$, "Preview"
	if loaderror alert "An error has occurred. This graphic cannot be displayed", "Ok", "info"
	tokennum = token(TheFile$, w$(), "/")
	tip$ = w$(tokennum) + "\n"
	tip$ = tip$ + "Last modified: " + left$(system$("filedate " + TheFile$), 9) + "\n"
	tip$ = tip$ + "File size:  " + str$(val(system$("filesize " + TheFile$))/1024) + " Kilobytes\n" 
	tip$ = tip$ + "Dimensions: " + GetGeometry$(TheFile$)
	tooltip "Preview", tip$
end sub

sub FillInstalledList()
	local r, item$
	listbox clear "InstalledList"
	r = open(AppletsFile$, "r")
	while(not(EOF(r)))
		input #r item$
		if item$ <> "" listbox add "InstalledList",item$
	wend 
	close r
end sub

sub GetApplets()
	ScanDirForApplets(developerdir$, "w")
	ScanDirForApplets(systemdir$, "a")
	ScanDirForApplets(userdir$, "a")
	ScanDirForApplets(nonpackageddir$, "a")
	system("sed '/^$/d' " + AppletsFile$ +" > " + AppletsTempFile$) //remove blank lines
	system("sort -u " + AppletsTempFile$  + " > " + AppletsFile$) //sort and remove duplicates
	system("rm -f " + AppletsTempFile$ + " &")
	//also get graphics
	system("query *.jpg | grep /data/artwork/GraphicsWorkflow/ >" + PicFile$ + " &")
end sub

sub GetGeometry$(TheFile$)
	//get width and height data from imagsize utility
	local w$(6), num,TheString$
	TheString$ = system$("imagsize '" + TheFile$ +"'")
	num = token(TheString$, w$())
	for f = 1 to num
		if instr(w$(f), "geom=") return mid$(w$(f), 6)
	next f
end sub

sub GetWindowDimension(dimension$)
	switch lower$(left$(dimension$,1))
		case "w"
			return window get "MainWindow", "Width"
			break
		case "h"
			return window get "MainWindow", "height"
			break
	end switch
end sub

sub MakeMenu()
	//Create menu in MainWindow
	menu "File", "Save", "S", "MainWindow"
	menu "File", "Open", "O", "MainWindow"
	menu "File", "Quit", "Q", "MainWindow"
	menu "Sequence", "Clear Sequence", "C", "MainWindow"
	menu "Sequence", "Generate Sequence", "G", "MainWindow"
	menu "Help", "About", "", "MainWindow"
end sub

sub OpenWindow()
	//Setup the main window here
	local examplewidth, exampleheight, windowwidth, windowheight, examplex, exampley
	window open 10,25 to 10 + MWWidth, MWHeight -20, "MainWindow", ProgramName$
	window set "MainWindow", "flags", "not-resizable"
	window set "MainWindow", "flags", "not-zoomable"
	windowwidth = GetWindowDimension("w")
	windowheight = GetWindowDimension("h")
	MakeMenu()
	//Installed applets
	text 5,25, "InstalledText", "Installed:", "MainWindow"
	listbox 5,40 to windowwidth /2 -5, windowheight / 3 * 2, "InstalledList", 1, "MainWindow"
	//installable applets
	text 5,windowheight / 3 * 2 + 10, "InstallableText", "Installable:", "MainWindow"
	listbox 5,windowheight / 3 * 2 + 25 to windowwidth /2 -5, windowheight -5, "InstallableList", 1, "MainWindow"
	//Sequence
	text windowwidth/2 + 5,25, "SequenceText", "Sequence:", "MainWindow"
	listbox windowwidth/2 + 5,40 to windowwidth- 5, windowheight / 2, "SequenceList", 1, "MainWindow"
	//Info
	text windowwidth/2 + 5, windowheight / 2 +10, "InfoText", "Info:",  "MainWindow"
	textedit windowwidth/2 + 5,windowheight / 2 +25 to windowwidth- 5, windowheight /3* 2, "InfoBox", 1, "MainWindow"
	textedit set "InfoBox", "editable", false
	//Example
	text windowwidth/2 + 5,windowheight / 3 * 2 + 10, "ExampleText", "Example:", "MainWindow"
	examplewidth = windowwidth/2 - 10
	exampleheight = windowheight - (windowheight / 3 * 2) - 35
	if examplewidth > exampleheight then
		examplewidth = exampleheight 
	elseif examplewidth < exampleheight 
		exampleheight = examplewidth
	endif
	examplewidth = int(examplewidth)
	exampleheight = int(exampleheight)
	examplex = int(windowwidth/2+ ((windowwidth/2 - examplewidth)/2))
	exampley = int(windowheight / 3 * 2 + 40 +((windowheight - (windowheight/3 * 2 + 40) - exampleheight)/2)) -5
	draw rect examplex -1, exampley -1 to examplex + examplewidth + 1, exampley + exampleheight + 1, "MainWindow"
	view examplex, exampley to examplex + examplewidth, exampley + exampleheight, "Preview", "MainWindow"
	DrawEmptyPreview()
	DrawPreview(DefaultPic$)
	FillInstalledList()
end sub

sub ScanDirForApplets(dir$, mode$)
	local result$, handle
	if FileExists(dir$) and FileorDir(dir$) then
		result$ = system$("ls -1 " + dir$)
		handle = open(AppletsFile$, mode$)
		if handle then
			print #handle result$
			close handle
		endif
	else
		return
	endif
end sub

########################################
###DATA statements, if any, come here###
########################################

label installables
data "AddBorderToImage"
data "AddRaisedBorderToImage"
data "AddSunkenBorderToImage"
data "EmbossImage"
data "FlipImage"
data "FlopImage"
data "NegateImage"
data "PolaroidImage"
data "RotateImage"
data "end_of_data"

