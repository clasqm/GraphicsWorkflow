#!/bin/env yab
################################
############# Prologue #############
################################

import libclasqm_main

//Yabadabbadoo notification
########DO NOT RENAME THIS FILE!########
//Yabadabbadoo needs it to function.
//Of course, this does not apply if you are editing in the official yab IDE.
 
##Fill in these fields with your own particulars.
##The variables will be used in the About Box and in naming the program.
 
ProgramName$ = "GraphicsWorkflow"
AuthorName$ = "Michel Clasquin-Johnson <clasqm@gmail.com>"
ProgramVersion$ = "V0.1"
ProgramBriefDescription$ = "This app lets you string together a series of separate scripts and applets and apply the sequence to an image."
ProgramLicense$ = "\nPublic Domain Software."
ProgramAcknowledgements$ ="\nWith thanks to Pete Goodeve for giving me the idea for this app."
 
//*************************
//*****Global Variables****
//*************************
 
## Technically, yab does not require you to declare global variables,
##It just is a really, really good idea to do it anyway.
// set DEBUG = 1 to print out all messages on the console
DEBUG = 1
//change this to DEBUG = 0 when you are ready to bind the program for distribution
systemdir$ = "/boot/system/apps/GraphicsWorkflow"
userdir$ = "/boot/home/config/apps/GraphicsWorkflow"
nonpackageddir$ = "/boot/home/config/non-packaged/apps/GraphicsWorkflow"
system("mkdir -p " + nonpackageddir$) 
developerdir$ = "/boot/home/projects/GraphicsWorkflow/PackagingFolder/apps/GraphicsWorkflow"
AppletsFile$ = TempDir$() + "/GraphicsWorkflow.content" 
AppletsTempFile$ = TempDir$() + "/GraphicsWorkflow.tmp"
SequenceTempFile$ = TempDir$() + "/GraphicsWorkflow.sequence"
AppletsPropertiesFile$ = TempDir$() + "/GraphicsWorkflow.properties"
PicFile$ = TempDir$() + "/GraphicsWorkflow.pics"
if WhereAmI$() = "/boot/home/projects/GraphicsWorkflow/binder" then
	DefaultPic$ = "/boot/home/projects/GraphicsWorkflow/PackagingFolder/data/artwork/GraphicsWorkflow/GW_Original.jpg"
else
	DefaultPic$ = WhereAmI$() +"/../../data/artwork/GraphicsWorkflow/GW_Original.jpg"
endif
MWWidth = 450
MWHeight = 600

##########################
######Preliminary Commands#####
##########################

## Commands to run before the Main Loop come here.
## e.g. setting up a window with a menu.
 
GetApplets() 
 OpenWindow()
 
 
#######End of Prologue#######


//Yabadabbadoo notification
########DO NOT RENAME THIS FILE!########
//Yabadabbadoo needs it to function.
//Of course, this does not apply if you are editing in the official yab IDE.

//Main Message Loop
dim msg$(1)
while(not leavingLoop)
	nCommands = token(message$, msg$(), "|")
	for everyCommand = 1 to nCommands
		if(DEBUG and msg$(everyCommand)<>"") print msg$(everyCommand)
		switch(msg$(everyCommand))
			case "_QuitRequested":
			case "MainWindow:_QuitRequested":
			case "MainWindow:File:Quit":
				leavingLoop = true
				break
			case "MainWindow:Help:About":
				Alert ProgramName$ + " " + ProgramVersion$ + "\n" + "by " + AuthorName$ +"\n\n" + ProgramBriefDescription$ + "\n" + ProgramLicense$ + "\n" + ProgramAcknowledgements$, "OK", "none"
				break
			case "MainWindow:Sequence:Clear Sequence"
				listbox clear "SequenceList"
				break
			case "MainWindow:Sequence:Generate Sequence"
				GenerateSequence()
				break
			default:
				break
		end switch
		if instr(msg$(everyCommand), "InstalledList:_Select") SelectInstalled(mid$(msg$(everyCommand), 23))
		if instr(msg$(everyCommand), "InstalledList:_Invoke") InvokeInstalled(mid$(msg$(everyCommand), 23))
		if instr(msg$(everyCommand), "InstallableList:_Select") SelectInstallable(mid$(msg$(everyCommand), 25))
	next everyCommand
wend
CloseWindow()

sub CheckConnection()
	local connected, connected$, getout
	textedit clear "InfoBox"
	//check if we are running on a modern version of haiku
	/////////////////////////////////////////////////////////////////////////////////////
	textedit add "InfoBox", "Checking Haiku  ...\n"
	if FileExists("/boot/system/bin/pkgman") then
		textedit add "InfoBox", "OK, pkgman found.\n"
		pause 0.5
	else
		alert "This does not look like a Haiku installation with package management.", "OK", "warning" 
		return 1
	endif
	//check if internet connection is live by pinging a google server
	/////////////////////////////////////////////////////////////////////////////////////////////////
	while(connected = 0)
		textedit add "InfoBox", "Checking internet  ...\n"
		connected$=system$("ping -c 1 216.58.223.36")
		if instr(connected$, "64 bytes from 216.58.223.36") = 0 then
			getout = alert "Internet connection is required for this program. Please switch on your connection", "OK","Quit","","warning"
			if getout = 2 return 1
		else
			textedit add "InfoBox", "OK, connected.\n"
			connected =1
			pause 0.5
		endif	
	wend
	
	//check if my repo is loaded
	///////////////////////////////////////////
	connected = 0
	while(connected = 0)
		textedit add "InfoBox", "Checking repo ...\n"
		connected$ = system$("pkgman list-repos")
		if instr(connected$, "clasqm's") = 0 then
			getout = alert "This program requires that the clasqm repository be added to your repo list. Proceed?", "OK","Quit","","warning"
			if getout = 2 then
				return 1
			else
				system("pkgman add-repo clasquin-johnson.co.za/michel/repo")
			endif
		else
			textedit add "InfoBox", "OK, repo found.\n"
			pause 0.5
			connected = 1
		endif
	wend
end sub

sub CloseWindow()
	//Close down the main window
	system("rm -f " + AppletsFile$ + " &")
	system("rm -f " + PicFile$ + " &")
	if window get "MainWindow", "exists" window close "MainWindow"
	exit
end sub

sub DrawEmptyPreview()
	//fill preview box with grey so that if you load a picture
	//with different dimensions, the old one does not 
	//bleed through on the edges
	local viewheight, viewwidth
	viewheight = view get "Preview", "height"
	viewwidth = view get "Preview", "width"
	draw set "highcolor", 216,216,216, "Preview"
	draw rect 0,0 to viewwidth, viewheight, "Preview"
	draw set "highcolor", 0,0,0, "Preview"
end sub

sub DrawPreview(TheFile$)
	local viewheight, viewwidth, loaderror, tip$, tokennum, w$(1)
	viewheight = view get "Preview", "height"
	viewwidth = view get "Preview", "width"
	loaderror = Draw image 0,0 to viewwidth, -1, TheFile$, "Preview"
	if loaderror alert "An error has occurred. This graphic cannot be displayed", "Ok", "info"
	tokennum = token(TheFile$, w$(), "/")
	tip$ = w$(tokennum) + "\n"
	tip$ = tip$ + "Last modified: " + left$(system$("filedate " + TheFile$), 9) + "\n"
	tip$ = tip$ + "File size:  " + str$(val(system$("filesize " + TheFile$))/1024) + " Kilobytes\n" 
	tip$ = tip$ + "Dimensions: " + GetGeometry$(TheFile$)
	tooltip "Preview", tip$
end sub

sub FillInstallableList()
	local instlabel, a$, installed$, L$(1)
	for f = 1 to listbox count "InstalledList"
		installed$ = installed$ + " " + listbox get$ "InstalledList", f 
	next f
	instlabel = 1
	listbox clear "InstallableList"
	restore installable
	read a$
	while(a$ <> "end_of_data")
		if not(instr(installed$, a$)) listbox add "InstallableList", a$
		read a$
		L$(instlabel) = a$
		instlabel = instlabel + 1
		dim L$(instlabel)
		//read a$
	wend
end sub

sub FillInstalledList()
	local r, item$
	listbox clear "InstalledList"
	r = open(AppletsFile$, "r")
	while(not(EOF(r)))
		input #r item$
		if item$ <> "" listbox add "InstalledList",item$
	wend 
	close r
end sub

sub GenerateSequence()
	local handle, sequencecount, item$
	sequencecount = listbox count "SequenceList"
	if sequencecount = 0 then
		return
	elseif sequencecount = 1
		alert "A sequence must have two or more elements,\notherwise just run the applet itself.", "Ok", "info" 
		return
	else
		handle = open(SequenceTempFile$, "w")
		print #handle "#/yab"
		for f = 1 to sequencecount
			item$ = listbox get$ "SequenceList", f
			print #handle "a$ = system$(lower$(\"" + item$ + "\") " + " + \" \" + a$)"
		next f	
		close handle
	endif
end sub

sub GetApplets()
	ScanDirForApplets(developerdir$, "w")
	ScanDirForApplets(systemdir$, "a")
	ScanDirForApplets(userdir$, "a")
	ScanDirForApplets(nonpackageddir$, "a")
	system("sed '/^$/d' " + AppletsFile$ +" > " + AppletsTempFile$) //remove blank lines
	system("sort -u " + AppletsTempFile$  + " > " + AppletsFile$) //sort and remove duplicates
	system("rm -f " + AppletsTempFile$ + " &")
	//also get graphics
	system("query *.jpg | grep /data/artwork/GraphicsWorkflow/ >" + PicFile$ + " &")
end sub

sub GetGeometry$(TheFile$)
	//get width and height data from imagsize utility
	local w$(6), num,TheString$
	TheString$ = system$("imagsize '" + TheFile$ +"'")
	num = token(TheString$, w$())
	for f = 1 to num
		if instr(w$(f), "geom=") return mid$(w$(f), 6)
	next f
end sub

sub GetWindowDimension(dimension$)
	switch lower$(left$(dimension$,1))
		case "w"
			return window get "MainWindow", "Width"
			break
		case "h"
			return window get "MainWindow", "height"
			break
	end switch
end sub

sub InvokeInstalled(applet$)
	local listitem
	listitem = val(applet$)
	listbox add "SequenceList", listbox get$ "InstalledList", listitem
end sub

sub MakeMenu()
	//Create menu in MainWindow
	menu "File", "Save", "S", "MainWindow"
	menu "File", "Open", "O", "MainWindow"
	menu "File", "Quit", "Q", "MainWindow"
	menu "Sequence", "Clear Sequence", "C", "MainWindow"
	menu "Sequence", "Generate Sequence", "G", "MainWindow"
	menu "Help", "About", "", "MainWindow"
end sub

sub OpenWindow()
	//Setup the main window here
	local examplewidth, exampleheight, windowwidth, windowheight, examplex, exampley
	window open 10,25 to 10 + MWWidth, MWHeight -20, "MainWindow", ProgramName$
	window set "MainWindow", "flags", "not-resizable"
	window set "MainWindow", "flags", "not-zoomable"
	windowwidth = GetWindowDimension("w")
	windowheight = GetWindowDimension("h")
	MakeMenu()
	
	//Installed applets
	text 5,25, "InstalledText", "Installed:", "MainWindow"
	listbox 5,40 to windowwidth /2 -5, windowheight / 3 * 2, "InstalledList", 1, "MainWindow"
	tooltip "InstalledList", "Single-click to select,\ndouble-click to add to sequence."
	
	//installable applets
	text 5,windowheight / 3 * 2 + 10, "InstallableText", "Installable:", "MainWindow"
	listbox 5,windowheight / 3 * 2 + 25 to windowwidth /2 -5, windowheight -5, "InstallableList", 1, "MainWindow"
	tooltip "InstallableList", "Single-click to select,\ndouble-click to install."
	
	//Sequence
	text windowwidth/2 + 5,25, "SequenceText", "Sequence:", "MainWindow"
	listbox windowwidth/2 + 5,40 to windowwidth- 5, windowheight / 2, "SequenceList", 1, "MainWindow"
	tooltip "SequenceList", "Double-click to delete"
	
	//Info
	text windowwidth/2 + 5, windowheight / 2 +10, "InfoText", "Info:",  "MainWindow"
	textedit windowwidth/2 + 5,windowheight / 2 +25 to windowwidth- 5, windowheight /3* 2, "InfoBox", 1, "MainWindow"
	textedit set "InfoBox", "editable", false
	
	//Example window
	text windowwidth/2 + 5,windowheight / 3 * 2 + 10, "ExampleText", "Example:", "MainWindow"
	examplewidth = windowwidth/2 - 10
	exampleheight = windowheight - (windowheight / 3 * 2) - 35
	if examplewidth > exampleheight then
		examplewidth = exampleheight 
	elseif examplewidth < exampleheight 
		exampleheight = examplewidth
	endif
	examplewidth = int(examplewidth)
	exampleheight = int(exampleheight)
	examplex = int(windowwidth/2+ ((windowwidth/2 - examplewidth)/2))
	exampley = int(windowheight / 3 * 2 + 40 +((windowheight - (windowheight/3 * 2 + 40) - exampleheight)/2)) -5
	draw rect examplex -1, exampley -1 to examplex + examplewidth + 1, exampley + exampleheight + 1, "MainWindow"
	view examplex, exampley to examplex + examplewidth, exampley + exampleheight, "Preview", "MainWindow"
	DrawEmptyPreview()
	DrawPreview(DefaultPic$)
	
	//fill the listboxes
	FillInstalledList()
	FillInstallableList()
	
	//check if we have internet access
	CheckConnection()
end sub

sub ScanDirForApplets(dir$, mode$)
	local result$, handle
	if FileExists(dir$) and FileorDir(dir$) then
		result$ = system$("ls -1 " + dir$)
		handle = open(AppletsFile$, mode$)
		if handle then
			print #handle result$
			close handle
		endif
	else
		return
	endif
end sub

sub SelectInstallable(listitem$)
	local listitem, result$, position
	listitem=val(listitem$)
	listitem$ = lower$(listbox get$ "InstallableList", listitem)
	result$ = StripLFoffSysCmd$(system$("pkgman search " + listitem$))
	position = instr(result$, listitem$)
	
	if position <> 0 result$ = mid$(result$, position + len(listitem$) + 1) 
	textedit clear "InfoBox"
	textedit add "InfoBox", result$
	DrawEmptyPreview()
end sub

sub SelectInstalled(listitem$)
	local listitem, listitempic$, handle, tempvar$, changed, canonical$
	listitem=val(listitem$)
	listitem$ = listbox get$ "InstalledList", listitem
	listitempic$ = listitem$ + ".jpg"
	handle = open(PicFile$, "r")
	while(not(eof(handle)))
		input #handle tempvar$
		if instr(tempvar$, listitem$) then 
			listitempic$ = tempvar$
			DrawEmptyPreview()
			DrawPreview(listitempic$)
			changed =1
		endif
	wend
	close #handle
	if changed = 0 then
		DrawEmptyPreview()
		DrawPreview(DefaultPic$)
	endif
	tempvar$ = ""
	canonical$ = StripLFoffSysCmd$(system$("readlink -f `which " + lower$(listitem$) + "`"))
	tempvar$ = attribute get$ "GraphicsWorkflow:Info", canonical$
	textedit clear "InfoBox"
	textedit add "InfoBox", tempvar$
end sub

########################################
###DATA statements, if any, come here###
########################################

label installable
data "AddBorderToImage"
data "AddRaisedBorderToImage"
data "AddSunkenBorderToImage"
data "CharcoalSketchImage"
data "EmbossImage"
data "FlipImage"
data "FlopImage"
data "NegateImage"
data "PolaroidImage"
data "RotateImage"
data "VignetteImage"
data "end_of_data"

